// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using prjTravelPlatformV3.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace prjTravelPlatformV3.Models
{
    public partial class dbTravalPlatformContext
    {
        private IdbTravalPlatformContextProcedures _procedures;

        public virtual IdbTravalPlatformContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new dbTravalPlatformContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IdbTravalPlatformContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetAvailableRoomsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAvailableRoomsByHotelIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAvailableRoomsByHotelIdTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAvailableRoomsEditResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAvailableRoomsEditFilterByHotelIdResult>().HasNoKey().ToView(null);
        }
    }

    public partial class dbTravalPlatformContextProcedures : IdbTravalPlatformContextProcedures
    {
        private readonly dbTravalPlatformContext _context;

        public dbTravalPlatformContextProcedures(dbTravalPlatformContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetAvailableRoomsResult>> GetAvailableRoomsAsync(DateTime? checkInDate, DateTime? checkOutDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "checkInDate",
                    Value = checkInDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "checkOutDate",
                    Value = checkOutDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAvailableRoomsResult>("EXEC @returnValue = [dbo].[GetAvailableRooms] @checkInDate, @checkOutDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAvailableRoomsByHotelIdResult>> GetAvailableRoomsByHotelIdAsync(int? hotelId, DateTime? checkInDate, DateTime? checkOutDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "hotelId",
                    Value = hotelId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "checkInDate",
                    Value = checkInDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "checkOutDate",
                    Value = checkOutDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAvailableRoomsByHotelIdResult>("EXEC @returnValue = [dbo].[GetAvailableRoomsByHotelId] @hotelId, @checkInDate, @checkOutDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAvailableRoomsByHotelIdTestResult>> GetAvailableRoomsByHotelIdTestAsync(int? hotelId, DateTime? checkInDate, DateTime? checkOutDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "hotelId",
                    Value = hotelId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "checkInDate",
                    Value = checkInDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "checkOutDate",
                    Value = checkOutDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAvailableRoomsByHotelIdTestResult>("EXEC @returnValue = [dbo].[GetAvailableRoomsByHotelIdTest] @hotelId, @checkInDate, @checkOutDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAvailableRoomsEditResult>> GetAvailableRoomsEditAsync(int? HotelId, int? RoomTypeId, DateTime? CheckInDate, DateTime? CheckOutDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "HotelId",
                    Value = HotelId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RoomTypeId",
                    Value = RoomTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CheckInDate",
                    Value = CheckInDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "CheckOutDate",
                    Value = CheckOutDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAvailableRoomsEditResult>("EXEC @returnValue = [dbo].[GetAvailableRoomsEdit] @HotelId, @RoomTypeId, @CheckInDate, @CheckOutDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAvailableRoomsEditFilterByHotelIdResult>> GetAvailableRoomsEditFilterByHotelIdAsync(int? HotelId, DateTime? CheckInDate, DateTime? CheckOutDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "HotelId",
                    Value = HotelId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CheckInDate",
                    Value = CheckInDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "CheckOutDate",
                    Value = CheckOutDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAvailableRoomsEditFilterByHotelIdResult>("EXEC @returnValue = [dbo].[GetAvailableRoomsEditFilterByHotelId] @HotelId, @CheckInDate, @CheckOutDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
